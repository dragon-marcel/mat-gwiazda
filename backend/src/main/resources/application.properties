spring.application.name=mat-gwiazda

# Supabase local Postgres (provided)
spring.datasource.url=jdbc:postgresql://127.0.0.1:54322/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# Hikari pool (defaults are usually fine for local dev)
spring.datasource.hikari.maximum-pool-size=10

# JPA / Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Optional: enable SQL comments for easier debugging
spring.jpa.properties.hibernate.use_sql_comments=true

# JWT configuration
jwt.secret=change_this_secret_to_a_strong_value_please_2025_10_22_0123456789abcdef
jwt.access-token-expiration-ms=3600000
jwt.refresh-token-expiration-ms=604800000


# OpenRouter (AI) configuration - do NOT commit real API keys to git
# Prefer setting the API key via an environment variable or an ignored local properties file.
# Examples:
#  - Environment variable: OPENROUTER_APIKEY (or OPENROUTER_API_KEY) will map to openrouter.apiKey
#  - Create an ignored file `openrouter.local.properties` with the property below and add it to .gitignore
# Uncomment or provide your key via env/local file in development. Do NOT commit the real key.

openrouter.apiKey=
openrouter.endpoint=https://openrouter.ai/api/v1/chat/completions
openrouter.defaultModel=google/gemini-2.0-flash-exp:free
openrouter.timeoutMs=30000
openrouter.maxRetries=3
openrouter.backoffBaseMs=200
