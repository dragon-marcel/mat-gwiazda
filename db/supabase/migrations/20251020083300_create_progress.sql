/*
 migration: create progress table, indexes, triggers and rls policies
 filename: 20251020083300_create_progress.sql
 purpose: create progress table linking users and tasks, indexes, updated_at trigger and rls
 affected: table: progress; indexes; triggers; rls policies
 notes: - all sql lowercase
        - depends on users and tasks tables existing (foreign keys)
        - enforces unique(task_id) to keep 1:1 tasks->progress relationship
        - rls enabled with granular policies for anon and authenticated roles
        - destructive operations: none in this migration
*/

create table if not exists progress (
  id uuid primary key default gen_random_uuid(),
  user_id uuid not null references users(id) on delete cascade on update cascade,
  task_id uuid not null references tasks(id) on delete cascade on update cascade,
  attempt_number integer not null default 1,
  level_updated boolean NOT NULL DEFAULT false,
  selected_option_index smallint check (selected_option_index >= 0 and selected_option_index < 4),
  is_correct boolean not null,
  points_awarded integer not null default 0 check (points_awarded >= 0),
  time_taken_ms integer,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  constraint progress_task_unique unique (task_id)
);

-- table comments
comment on table progress is 'user progress records linking users to tasks with attempt metadata and scoring';

-- progress table column comments
comment on column progress.id is 'primary key uuid generated by gen_random_uuid(); stable identifier for the progress row';
comment on column progress.user_id is 'foreign key referencing users(id); owner of this progress record';
comment on column progress.task_id is 'foreign key referencing tasks(id); the task this progress row is about';
comment on column progress.level_updated is 'used for leveling and achievements';
comment on column progress.attempt_number is '1-based attempt counter for repeated tries on the same task';
comment on column progress.selected_option_index is 'index (0-3) chosen by the user for this attempt; may be null';
comment on column progress.is_correct is 'boolean indicating whether the attempt was correct';
comment on column progress.points_awarded is 'points granted for this attempt; non-negative integer';
comment on column progress.time_taken_ms is 'time taken to answer in milliseconds; may be null if not recorded';
comment on column progress.created_at is 'timestamp when the progress record was created; set by default now()';
comment on column progress.updated_at is 'timestamp when the progress record was last modified; maintained by trigger';

-- attach trigger to update updated_at on update
-- note: refresh_updated_at_column() is created in the users migration; ensure that migration is applied first
drop trigger if exists trg_progress_updated_at on progress;
create trigger trg_progress_updated_at
before update on progress
for each row
execute procedure refresh_updated_at_column();

-- indexes for progress
create index if not exists idx_progress_user_id on progress (user_id);
create unique index if not exists idx_progress_task_id_unique on progress (task_id);
create index if not exists idx_progress_user_created_at on progress (user_id, created_at desc);
create index if not exists idx_progress_user_is_correct on progress (user_id, is_correct);

-- enable row level security
alter table progress enable row level security;

-- rls policies for progress
-- insert: authenticated users can insert rows for themselves only
create policy progress_insert_authenticated_own
  on progress
  for insert
  to authenticated
  with check (user_id = auth.uid()::uuid);

-- insert: anon denied
create policy progress_insert_anon_deny
  on progress
  for insert
  to anon
  with check (false);

-- select: authenticated can read only their own progress
create policy progress_select_authenticated_own
  on progress
  for select
  to authenticated
  using (user_id = auth.uid()::uuid);

-- select: anon denied
create policy progress_select_anon_deny
  on progress
  for select
  to anon
  using (false);

-- update: authenticated can update only their own rows
create policy progress_update_authenticated_own
  on progress
  for update
  to authenticated
  using (user_id = auth.uid()::uuid)
  with check (user_id = auth.uid()::uuid);

-- update: anon denied
create policy progress_update_anon_deny
  on progress
  for update
  to anon
  using (false)
  with check (false);

-- delete: deny deletes for authenticated clients; allow admin role to delete
create policy progress_delete_authenticated_deny
  on progress
  for delete
  to authenticated
  using (false);

create policy progress_delete_admin
  on progress
  for delete
  to authenticated
  using (auth.role() = 'admin');

-- migration notes:
-- apply users migration, then tasks migration, then this migration to ensure foreign key targets exist.
-- this file intentionally contains only progress-related sql; users/tasks sql live in separate migration files.
