--
-- migration: create tasks table, indexes, triggers and rls policies
-- filename: 20251020083200_create_tasks.sql
-- purpose: create tasks table (references users), updated_at trigger, indexes and rls
-- affected: table: tasks; indexes; triggers; rls policies
-- notes: - all sql lowercase
--        - depends on users table existing (created_by references users(id))
--        - rls enabled with granular policies for anon and authenticated roles
--        - destructive operations: none in this migration
--

-- table: tasks
create table if not exists tasks (
  id uuid primary key default gen_random_uuid(),
  level smallint not null check (level >= 1 and level <= 8),
  prompt text not null,
  options jsonb not null check (jsonb_typeof(options) = 'array' and jsonb_array_length(options) = 4),
  correct_option_index smallint not null check (correct_option_index >= 0 and correct_option_index < 4),
  explanation text,
  created_by uuid references users(id) on delete set null,
  is_active boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- table comments
comment on table tasks is 'task bank with multiple-choice prompts, associated difficulty level and optional author';

-- tasks table column comments
comment on column tasks.id is 'primary key uuid generated by gen_random_uuid(); stable identifier for the task';
comment on column tasks.level is 'difficulty or progression level for the task; constrained between 1 and 8';
comment on column tasks.prompt is 'task prompt or question text presented to the user';
comment on column tasks.options is 'jsonb array of exactly four option objects/strings; validated by check constraint';
comment on column tasks.correct_option_index is 'index (0-3) indicating the correct option in the options array';
comment on column tasks.explanation is 'optional explanation shown after answering to provide feedback';
comment on column tasks.created_by is 'foreign key referencing users(id); identifies task author or null for system tasks';
comment on column tasks.is_active is 'flag indicating whether the task is active and visible to clients';
comment on column tasks.created_at is 'timestamp when the task was created; set by default now()';
comment on column tasks.updated_at is 'timestamp when the task was last modified; maintained by trigger';

-- attach trigger to update updated_at on update
drop trigger if exists trg_tasks_updated_at on tasks;
create trigger trg_tasks_updated_at
before update on tasks
for each row
execute procedure refresh_updated_at_column();

-- indexes for tasks
create index if not exists idx_tasks_level_active on tasks (level, is_active);
create index if not exists idx_tasks_created_by on tasks (created_by);
create index if not exists idx_tasks_options_gin on tasks using gin (options jsonb_path_ops);

-- enable row level security
alter table tasks enable row level security;

-- rls policies for tasks
-- select: anon may read tasks (public read)
create policy tasks_select_anon_public
  on tasks
  for select
  to anon
  using (true);

-- select: authenticated may read tasks (public read)
create policy tasks_select_authenticated_public
  on tasks
  for select
  to authenticated
  using (true);

-- insert: authenticated may insert when created_by is null (system) or equals their uid
create policy tasks_insert_authenticated_own
  on tasks
  for insert
  to authenticated
  with check (created_by is null or created_by = auth.uid()::uuid);

-- insert: anon denied
create policy tasks_insert_anon_deny
  on tasks
  for insert
  to anon
  with check (false);

-- update: authenticated owner may update their tasks
create policy tasks_update_authenticated_owner
  on tasks
  for update
  to authenticated
  using (created_by is not null and created_by = auth.uid()::uuid)
  with check (created_by is not null and created_by = auth.uid()::uuid);

-- update: admin may update any task
create policy tasks_update_admin
  on tasks
  for update
  to authenticated
  using (auth.role() = 'admin')
  with check (auth.role() = 'admin');

-- delete: authenticated owners can delete their own tasks
create policy tasks_delete_authenticated_owner
  on tasks
  for delete
  to authenticated
  using (created_by is not null and created_by = auth.uid()::uuid);

-- delete: anon denied
create policy tasks_delete_anon_deny
  on tasks
  for delete
  to anon
  using (false);

-- migration notes:
-- ensure that users table exists before applying this migration; if not, apply users migration first.
