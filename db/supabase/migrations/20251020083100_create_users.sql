--
-- migration: create users table and supporting objects
-- filename: 20251020083100_create_users.sql
-- purpose: create user_role type, users table, updated_at trigger function, indexes and rls policies
-- affected: type user_role; table: users; function: refresh_updated_at_column; indexes; rls policies
-- notes: - all sql lowercase
--        - creates pgcrypto extension for gen_random_uuid()
--        - rls enabled with granular policies for 'anon' and 'authenticated' roles
--        - destructive operations: none in this migration
--

-- setup: ensure pgcrypto extension available (safe to run multiple times)
create extension if not exists pgcrypto;

-- type: user_role (enum) - create only if not exists
do $$
begin
  if not exists (select 1 from pg_type where typname = 'user_role') then
    create type user_role as enum ('student', 'admin');
  end if;
end$$;

-- helper: trigger function to refresh updated_at timestamp
create or replace function refresh_updated_at_column()
returns trigger
language plpgsql
as $$
begin
  new.updated_at = now();
  return new;
end;
$$;

-- table: users
create table if not exists users (
  id uuid primary key default gen_random_uuid(),
  email varchar(255) not null unique,
  password varchar(255) not null,
  user_name varchar(100) not null,
  role varchar(10) not null default 'student',
  current_level smallint not null default 1 check (current_level >= 1 and current_level <= 8),
  points integer not null default 0 check (points >= 0),
  stars integer not null default 0 check (stars >= 0),
  is_active boolean not null default true,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now(),
  last_active_at timestamptz
);

-- table comments
comment on table users is 'table of application users and profiles; contains authentication, role and simple gamification fields';

-- users table column comments
comment on column users.id is 'primary key uuid generated by gen_random_uuid(); stable identifier for the user';
comment on column users.email is 'unique email used for login and notifications; not null';
comment on column users.password is 'hashed password for authentication; store hashed values only';
comment on column users.user_name is 'display name or handle for the user; not null';
comment on column users.role is 'user role enum (student, admin) controlling privileged actions';
comment on column users.current_level is 'current gamification level of the user; constrained between 1 and 8';
comment on column users.points is 'accumulated points for the user; non-negative integer';
comment on column users.stars is 'accumulated stars or achievements for the user; non-negative integer';
comment on column users.is_active is 'flag indicating whether the account is active and allowed to login';
comment on column users.created_at is 'timestamp when the user record was created; set by default now()';
comment on column users.updated_at is 'timestamp when the user record was last modified; maintained by trigger';
comment on column users.last_active_at is 'timestamp of last observed user activity; may be null when never active';

-- attach trigger to update updated_at on update
drop trigger if exists trg_users_updated_at on users;
create trigger trg_users_updated_at
before update on users
for each row
execute procedure refresh_updated_at_column();

-- indexes
create index if not exists idx_users_current_level on users (current_level);
create index if not exists idx_users_last_active_at on users (last_active_at desc);

-- enable row level security
alter table users enable row level security;

-- rls policies for users
-- select: authenticated users can select only their own profile
create policy users_select_authenticated_own
  on users
  for select
  to authenticated
  using (id = auth.uid()::uuid);

-- select: anon denied explicitly
create policy users_select_anon_deny
  on users
  for select
  to anon
  using (false);

-- select: authenticated admin may select any row
create policy users_select_admin
  on users
  for select
  to authenticated
  using (auth.role() = 'admin');

-- insert: authenticated may insert only when id matches auth.uid()
create policy users_insert_authenticated_own
  on users
  for insert
  to authenticated
  with check (id = auth.uid()::uuid);

-- insert: anon denied
create policy users_insert_anon_deny
  on users
  for insert
  to anon
  with check (false);

-- update: authenticated may update only their own row
create policy users_update_authenticated_own
  on users
  for update
  to authenticated
  using (id = auth.uid()::uuid)
  with check (id = auth.uid()::uuid);

-- update: anon denied
create policy users_update_anon_deny
  on users
  for update
  to anon
  using (false)
  with check (false);

-- delete: deny deletes from client roles; administrative deletes should use service role
create policy users_delete_authenticated_deny
  on users
  for delete
  to authenticated
  using (false);
create policy users_delete_anon_deny
  on users
  for delete
  to anon
  using (false);

-- migration notes:
-- apply this migration before tasks and progress migrations because they reference users.
